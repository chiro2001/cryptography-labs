pub mod key_writer;
pub mod key_reader;

use num_bigint::BigInt;

#[derive(Debug)]
pub struct Key {
    pub base: BigInt,
    pub m: BigInt,
}

#[derive(Debug)]
pub struct KeySet {
    pub public: Key,
    pub private: Key,
}

#[derive(Debug)]
pub enum KeyError {
    ParseError(String),
    FormatError,
}

impl From<String> for Key {
    fn from(path: String) -> Self {
        Self::load(&path).unwrap()
    }
}

impl From<&str> for Key {
    fn from(path: &str) -> Self {
        Self::load(&path.to_string()).unwrap()
    }
}

struct KeyPrivate;

struct KeyPublic;

const KEY_PRIVATE: KeyPrivate = KeyPrivate {};
const KEY_PUBLIC: KeyPublic = KeyPublic {};

trait KeyTypeName {
    fn get_type_name() -> String;
}

impl KeyTypeName for KeyPublic {
    fn get_type_name() -> String { "PUBLIC".to_string() }
}

impl KeyTypeName for KeyPrivate {
    fn get_type_name() -> String { "PRIVATE".to_string() }
}

const BASE64_SPLIT: usize = 70;

#[cfg(test)]
mod tests {
    use std::error::Error;
    use std::str::FromStr;
    use num_bigint::BigInt;
    use crate::rsa::keys::Key;

    #[test]
    fn test_key_save() -> Result<(), Box<dyn Error>> {
        // get keys: KeySet { public: Key {
        // base: 1918022387998207002219685790885422000751305870471197615474028403267680489056093224556537201212850361018884250661472831998657776705844077320563372556461358381610646614987785380742299336150827724805642511244842883909329821830379863046595720068818656861135676253679842005301808669637130750097414684421703920179,
        // m: 3109289493004396232718677839075724040902511898079934814878402066495223327499893476355898158210192836071346652507223581255051247419447099538963654140505175239054593601039582793123484358359757335255732592975546398804612740515822807396398780156996203878672950754579450708664916820774253607630761518662668511457 },
        // private: Key {
        // base: 1647244904834020890590328220079077450255926221297431015846481670679976278867195022845440259910374906689286200978495387347099819640456100034631096132217180522459428379766721029286016492809874734755016913514610957434891297109301215308348746352680481967531502218226057761620024021288408693507383518495475314247,
        // m: 3109289493004396232718677839075724040902511898079934814878402066495223327499893476355898158210192836071346652507223581255051247419447099538963654140505175239054593601039582793123484358359757335255732592975546398804612740515822807396398780156996203878672950754579450708664916820774253607630761518662668511457 } }
        let key = Key {
            base: BigInt::from_str("1918022387998207002219685790885422000751305870471197615474028403267680489056093224556537201212850361018884250661472831998657776705844077320563372556461358381610646614987785380742299336150827724805642511244842883909329821830379863046595720068818656861135676253679842005301808669637130750097414684421703920179").unwrap(),
            m: BigInt::from_str("3109289493004396232718677839075724040902511898079934814878402066495223327499893476355898158210192836071346652507223581255051247419447099538963654140505175239054593601039582793123484358359757335255732592975546398804612740515822807396398780156996203878672950754579450708664916820774253607630761518662668511457").unwrap(),
        };
        key.save(&"data/test.pub".to_string(), true).unwrap();
        Ok(())
    }

    #[test]
    fn test_key_load() -> Result<(), Box<dyn Error>> {
        // let key = Key::new()
        Ok(())
    }
}